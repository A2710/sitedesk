// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum Role {
  ADMIN
  AGENT
}

enum ChatStatus {
  WAITING
  ACTIVE
  CLOSED
}

// Main Organization Model
model Organization {
  id          Int           @id @default(autoincrement())
  name        String
  users       User[]
  teams       Team[]
  categories  Category[]
  customers   Customer[]
  domains     OrgDomain[]
  chats       Chat[]
  messages    Message[]
  createdAt   DateTime      @default(now())
}

// Allowed Domain Model
model OrgDomain {
  id             Int           @id @default(autoincrement())
  organization   Organization  @relation(fields: [organizationId], references: [id])
  organizationId Int
  domain         String
  @@unique([domain])
}

// User (Agent/Admin) Model
model User {
  id              Int             @id @default(autoincrement())
  name            String
  email           String          @unique
  password        String
  role            Role
  isOnline        Boolean         @default(false)
  teams           UserTeam[]      // many-to-many with Team
  chats           Chat[]          @relation("AgentChats")
  notes           CustomerNote[]  @relation("UserNotes")
  organization    Organization    @relation(fields: [organizationId], references: [id])
  organizationId  Int
  createdAt       DateTime        @default(now())
}

// Team Model (M:M with Category via TeamCategory)
model Team {
  id              Int             @id @default(autoincrement())
  name            String
  members         UserTeam[]      // many-to-many with User
  categories      TeamCategory[]  // many-to-many with Category
  organization    Organization    @relation(fields: [organizationId], references: [id])
  organizationId  Int
  createdAt       DateTime        @default(now())
}

// Team <-> User Join Table
model UserTeam {
  id      Int   @id @default(autoincrement())
  user    User  @relation(fields: [userId], references: [id])
  userId  Int
  team    Team  @relation(fields: [teamId], references: [id])
  teamId  Int

  @@unique([userId, teamId])
}

// Category Model (M:M with Team via TeamCategory)
model Category {
  id              Int             @id @default(autoincrement())
  name            String
  teams           TeamCategory[]  // many-to-many with Team
  chats           Chat[]
  organization    Organization    @relation(fields: [organizationId], references: [id])
  organizationId  Int
  @@unique([organizationId, name])
}

// Team <-> Category Join Table (Many-to-Many)
model TeamCategory {
  id          Int       @id @default(autoincrement())
  team        Team      @relation(fields: [teamId], references: [id])
  teamId      Int
  category    Category  @relation(fields: [categoryId], references: [id])
  categoryId  Int

  @@unique([teamId, categoryId])
}

// Customer Model
model Customer {
  id              Int             @id @default(autoincrement())
  name            String
  email           String
  chats           Chat[]
  notes           CustomerNote[]
  organization    Organization    @relation(fields: [organizationId], references: [id])
  organizationId  Int
  createdAt       DateTime        @default(now())
}

// Chat (Support Ticket/Session)
model Chat {
  id         String         @id @default(uuid())
  status     ChatStatus
  customer   Customer    @relation(fields: [customerId], references: [id])
  customerId Int
  category   Category    @relation(fields: [categoryId], references: [id])
  categoryId Int
  agent      User?       @relation("AgentChats", fields: [agentId], references: [id])
  agentId    Int?
  messages   Message[]
  customerNotes CustomerNote[] 
  organization    Organization    @relation(fields: [organizationId], references: [id])
  organizationId  Int
  feedback   Feedback?
  createdAt  DateTime    @default(now())
  closedAt   DateTime?
}

// Message (in Chat)
model Message {
  id         String       @id @default(uuid())
  chat       Chat      @relation(fields: [chatId], references: [id])
  chatId     String
  senderType String    // 'customer' or 'agent'
  receiverType String?   // 'customer' or 'agent'
  receiverId   Int?
  senderId   Int
  content    String
  organization Organization @relation(fields: [organizationId], references: [id])
  organizationId Int
  createdAt  DateTime  @default(now())
}

// Feedback (per Chat)
model Feedback {
  id         String       @id @default(uuid())
  chat       Chat      @relation(fields: [chatId], references: [id])
  chatId     String       @unique
  rating     Int
  comment    String?
  createdAt  DateTime  @default(now())
}

// Customer Note (internal by agent)
model CustomerNote {
  id          String       @id @default(uuid())
  customer    Customer  @relation(fields: [customerId], references: [id])
  customerId  Int
  chat        Chat      @relation(fields: [chatId], references: [id])
  chatId      String
  author      User      @relation("UserNotes", fields: [authorId], references: [id])
  authorId    Int
  content     String
  createdAt   DateTime  @default(now())
}
